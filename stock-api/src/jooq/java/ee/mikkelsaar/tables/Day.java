/*
 * This file is generated by jOOQ.
 */
package ee.mikkelsaar.tables;


import ee.mikkelsaar.Keys;
import ee.mikkelsaar.Public;
import ee.mikkelsaar.tables.records.DayRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Day extends TableImpl<DayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.day</code>
     */
    public static final Day DAY = new Day();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DayRecord> getRecordType() {
        return DayRecord.class;
    }

    /**
     * The column <code>public.day.id</code>.
     */
    public final TableField<DayRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.day.date</code>.
     */
    public final TableField<DayRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Day(Name alias, Table<DayRecord> aliased) {
        this(alias, aliased, null);
    }

    private Day(Name alias, Table<DayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.day</code> table reference
     */
    public Day(String alias) {
        this(DSL.name(alias), DAY);
    }

    /**
     * Create an aliased <code>public.day</code> table reference
     */
    public Day(Name alias) {
        this(alias, DAY);
    }

    /**
     * Create a <code>public.day</code> table reference
     */
    public Day() {
        this(DSL.name("day"), null);
    }

    public <O extends Record> Day(Table<O> child, ForeignKey<O, DayRecord> key) {
        super(child, key, DAY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DayRecord, Long> getIdentity() {
        return (Identity<DayRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DayRecord> getPrimaryKey() {
        return Keys.DAY_PKEY;
    }

    @Override
    public List<UniqueKey<DayRecord>> getKeys() {
        return Arrays.<UniqueKey<DayRecord>>asList(Keys.DAY_PKEY, Keys.DAY_DATE_KEY);
    }

    @Override
    public Day as(String alias) {
        return new Day(DSL.name(alias), this);
    }

    @Override
    public Day as(Name alias) {
        return new Day(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Day rename(String name) {
        return new Day(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Day rename(Name name) {
        return new Day(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
