/*
 * This file is generated by jOOQ.
 */
package ee.mikkelsaar.tables;


import ee.mikkelsaar.Keys;
import ee.mikkelsaar.Public;
import ee.mikkelsaar.tables.records.ShareRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row22;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Share extends TableImpl<ShareRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.share</code>
     */
    public static final Share SHARE = new Share();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShareRecord> getRecordType() {
        return ShareRecord.class;
    }

    /**
     * The column <code>public.share.id</code>.
     */
    public final TableField<ShareRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.share.day</code>.
     */
    public final TableField<ShareRecord, Long> DAY = createField(DSL.name("day"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.share.ticker</code>.
     */
    public final TableField<ShareRecord, String> TICKER = createField(DSL.name("ticker"), SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * The column <code>public.share.name</code>.
     */
    public final TableField<ShareRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.share.isin</code>.
     */
    public final TableField<ShareRecord, String> ISIN = createField(DSL.name("isin"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.share.currency</code>.
     */
    public final TableField<ShareRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>public.share.marketplace</code>.
     */
    public final TableField<ShareRecord, String> MARKETPLACE = createField(DSL.name("marketplace"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>public.share.list</code>.
     */
    public final TableField<ShareRecord, String> LIST = createField(DSL.name("list"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.share.average_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> AVERAGE_PRICE = createField(DSL.name("average_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.open_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> OPEN_PRICE = createField(DSL.name("open_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.high_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> HIGH_PRICE = createField(DSL.name("high_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.low_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> LOW_PRICE = createField(DSL.name("low_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.last_close_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> LAST_CLOSE_PRICE = createField(DSL.name("last_close_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.last_price</code>.
     */
    public final TableField<ShareRecord, BigDecimal> LAST_PRICE = createField(DSL.name("last_price"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.price_change_percentage</code>.
     */
    public final TableField<ShareRecord, BigDecimal> PRICE_CHANGE_PERCENTAGE = createField(DSL.name("price_change_percentage"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.best_bid</code>.
     */
    public final TableField<ShareRecord, BigDecimal> BEST_BID = createField(DSL.name("best_bid"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.best_ask</code>.
     */
    public final TableField<ShareRecord, BigDecimal> BEST_ASK = createField(DSL.name("best_ask"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.trades</code>.
     */
    public final TableField<ShareRecord, Integer> TRADES = createField(DSL.name("trades"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.share.volume</code>.
     */
    public final TableField<ShareRecord, Long> VOLUME = createField(DSL.name("volume"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.share.turnover</code>.
     */
    public final TableField<ShareRecord, BigDecimal> TURNOVER = createField(DSL.name("turnover"), SQLDataType.NUMERIC(32, 10), this, "");

    /**
     * The column <code>public.share.industry</code>.
     */
    public final TableField<ShareRecord, String> INDUSTRY = createField(DSL.name("industry"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.share.supersector</code>.
     */
    public final TableField<ShareRecord, String> SUPERSECTOR = createField(DSL.name("supersector"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Share(Name alias, Table<ShareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Share(Name alias, Table<ShareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.share</code> table reference
     */
    public Share(String alias) {
        this(DSL.name(alias), SHARE);
    }

    /**
     * Create an aliased <code>public.share</code> table reference
     */
    public Share(Name alias) {
        this(alias, SHARE);
    }

    /**
     * Create a <code>public.share</code> table reference
     */
    public Share() {
        this(DSL.name("share"), null);
    }

    public <O extends Record> Share(Table<O> child, ForeignKey<O, ShareRecord> key) {
        super(child, key, SHARE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ShareRecord, Long> getIdentity() {
        return (Identity<ShareRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShareRecord> getPrimaryKey() {
        return Keys.SHARE_PKEY;
    }

    @Override
    public List<UniqueKey<ShareRecord>> getKeys() {
        return Arrays.<UniqueKey<ShareRecord>>asList(Keys.SHARE_PKEY, Keys.SHARE_DAY_TICKER_KEY);
    }

    @Override
    public List<ForeignKey<ShareRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShareRecord, ?>>asList(Keys.SHARE__SHARE_DAY_FKEY);
    }

    private transient Day _day;

    public Day day() {
        if (_day == null)
            _day = new Day(this, Keys.SHARE__SHARE_DAY_FKEY);

        return _day;
    }

    @Override
    public Share as(String alias) {
        return new Share(DSL.name(alias), this);
    }

    @Override
    public Share as(Name alias) {
        return new Share(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(String name) {
        return new Share(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Share rename(Name name) {
        return new Share(name, null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<Long, Long, String, String, String, String, String, String, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Integer, Long, BigDecimal, String, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }
}
