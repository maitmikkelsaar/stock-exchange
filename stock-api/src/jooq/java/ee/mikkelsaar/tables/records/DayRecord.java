/*
 * This file is generated by jOOQ.
 */
package ee.mikkelsaar.tables.records;


import ee.mikkelsaar.tables.Day;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DayRecord extends UpdatableRecordImpl<DayRecord> implements Record2<Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.day.id</code>.
     */
    public DayRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.day.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.day.date</code>.
     */
    public DayRecord setDate(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.day.date</code>.
     */
    public LocalDateTime getDate() {
        return (LocalDateTime) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, LocalDateTime> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Day.DAY.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Day.DAY.DATE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getDate();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getDate();
    }

    @Override
    public DayRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DayRecord value2(LocalDateTime value) {
        setDate(value);
        return this;
    }

    @Override
    public DayRecord values(Long value1, LocalDateTime value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DayRecord
     */
    public DayRecord() {
        super(Day.DAY);
    }

    /**
     * Create a detached, initialised DayRecord
     */
    public DayRecord(Long id, LocalDateTime date) {
        super(Day.DAY);

        setId(id);
        setDate(date);
    }
}
